<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on hackfox</title>
    <link>https://xsoer.github.io/categories/mysql/</link>
    <description>Recent content in mysql on hackfox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 10 Mar 2019 18:25:53 +0000</lastBuildDate>
    
	<atom:link href="https://xsoer.github.io/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mysql数据库主从同步</title>
      <link>https://xsoer.github.io/posts/2019/03-10-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Sun, 10 Mar 2019 18:25:53 +0000</pubDate>
      
      <guid>https://xsoer.github.io/posts/2019/03-10-mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</guid>
      <description>  0x00、同步步骤   1.主库和从库创建同步账户
mysql&amp;gt; grant replication slave, replication client on *.* to repl@&#39;192.168.1.%&#39; identified by &#39;123456&#39;;  2.主库配置/etc/my.cnf
server-id=130	#保证唯一值 log-bin=mysql-bin binlog_format=mixed binlog-do-db=test2 binlog-ignore-db=mysql log-error=/var/lib/mysql/mysql.err  3.重启主库
 4.查看主库状态
mysql&amp;gt;show master status; +-------------------------+-----------------+--------------------+-------------------------+ | File |	Position | Binlog_Do_DB | Binlog_Ignore_DB | +-------------------------+----------------+--------------------+--------------------------+ | mysql-bin.000002 | 120 | test2 | mysql | +-------------------------+----------------+---------------------+------------------------+ 1 row in set (0.00 sec)  5.从库配置 /etc/my.cnf
server-id=131 #保证唯一值 log-bin=mysql-bin binlog_format=mixed replicate-do-db=test2 replicate-ignore-db=mysql relay_log=/var/lib/mysql/mysql-relay-bin log_slave_updates=1 read_only=1  6.重启从库
 7.指向主库操作
mysql&amp;gt; change master to master_host=&#39;192.168.1.201&#39;, master_user=&#39;repl&#39;, master_password=&#39;123456&#39;, master_log_file=&#39;mysql-bin.000002&#39;, master_log_pos=120;  8.开始同步
mysql&amp;gt;start slave;  9.查看状态
mysql&amp;gt;show slave status;  10.双向主从的话，把主库按照从库在配置一遍即可
   0x01、备注：   1.两个数据库版本尽量一致，如果不一致，高版本做从库，此时不可双向主从 2.主库和从库的数据库名必须相同； 3.主库和从库的复制可以精确到表，但是在需要更改主库或从库的数据结构时需要立刻重启slave； 4.不能在mysql配置文件里直接写入master的配置信息，需要用change master命令来完成； 5.指定replicate_do_db必须在my.ini里配置，不能用change master命令来完成； 6.如果不及时清理，日积月累二进制日志文件可能会把磁盘空间占满，可以在配置文件里加上expire_logs_days=7，只保留最近7天的日志，建议当slave不再使用时，通过reset slave来取消relaylog；  </description>
    </item>
    
    <item>
      <title>mysql常用语句</title>
      <link>https://xsoer.github.io/posts/2019/03-10-mysql%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Sun, 10 Mar 2019 18:20:48 +0000</pubDate>
      
      <guid>https://xsoer.github.io/posts/2019/03-10-mysql%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</guid>
      <description>0x00、常用语句   1.授权用户
mysql&amp;gt;GRANT ALL PRIVILEGES ON *.* TO &#39;zxc&#39;@&#39;%&#39; IDENTIFIED BY &#39;ydp#2015$Z!!!&#39; WITH GRANT OPTION; mysql&amp;gt;FLUSH PRIVILEGES;  2.远程连接
shell&amp;gt;mysql -h127.0.0.1 -P3306 -uroot -p  3.导出数据库
shell&amp;gt;mysqldump -h127.0.0.1 -P3306 -uroot -p sqsx &amp;gt; sqsx.sql  4.导入数据库
shell&amp;gt;mysql -uroot -p sqsx &amp;lt; sqsx.sql  5.分析查询
mysql&amp;gt;explain select * from user;  6.查询所有的进程
mysql&amp;gt;show procelist;  7.建数据库语句
mysql&amp;gt;create database dbname default character set utf8 collate utf8_general_ci;  8.创建数据表语句
mysql&amp;gt;create table dbname.tablename () engine=Innodb charset=utf8;  9.删除数据库
mysql&amp;gt;drop database dbname;  10.查看数据库状态
mysql&amp;gt;use dbname; mysql&amp;gt;status;  11.查看参数
mysql&amp;gt;show variables like “%sql%”;  12.查看事件
mysql&amp;gt;show events;  13.查看触发器
mysql&amp;gt;show triggers;  14.查看所有参数
mysql&amp;gt;show status;  15.查看打开表
mysql&amp;gt;show open tables;  16.查看表状态
mysql&amp;gt;show table status;  17.查看主数据状态
mysql&amp;gt;show master status;  18.查看从数据库状态
mysql&amp;gt;show slave status;  19.查看函数状态
mysql&amp;gt;show function status;  20.查看插件
mysql&amp;gt;show plugins;  21.查看某用户的授权
mysql&amp;gt;show grants for username;  22.</description>
    </item>
    
    <item>
      <title>mysql编码问题</title>
      <link>https://xsoer.github.io/posts/2017/07-06-mysql%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 06 Sep 2017 09:12:43 +0000</pubDate>
      
      <guid>https://xsoer.github.io/posts/2017/07-06-mysql%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</guid>
      <description> mysql编码问题  作者：codehackfox@gamil.com 时间：2019-09-06 09:12:43  </description>
    </item>
    
    <item>
      <title>mysql性能优化建议</title>
      <link>https://xsoer.github.io/posts/2015/12-28-mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Mon, 28 Dec 2015 12:23:00 +0000</pubDate>
      
      <guid>https://xsoer.github.io/posts/2015/12-28-mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE/</guid>
      <description>  0x00、优化建议   1.为查询缓存优化你的查询(curdata(),rand(),no()无法进行优化)； 2.explain你的查询； 3.当只要一行数据时使用limit 1； 4.为搜索字段建立索引； 5.在join表的时候使用相当类型的列，并将其索引 6.千万不要order by rand(); 7.避免select *； 8.用于为每张表设置一个id，尽量为unsigned int类型； 9.使用enum而不是varchar; 10.从procedure analyse()取得建议； 11.尽可能的使用not null; 12.Prepared Statements; 13.把ip地址存成UNSIGNED INT 14.固定长度表会更快； 15.垂直分割； 16.拆分大的delete或insert语句； 17.越小的列会越快； 18.选择正确的存储引擎； 19.使用一个对象关系映射器（ORM）； 20.小心“永久链接”；  </description>
    </item>
    
    <item>
      <title>mysql技术</title>
      <link>https://xsoer.github.io/posts/2015/10-12-mysql%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 12 Oct 2015 12:23:00 +0000</pubDate>
      
      <guid>https://xsoer.github.io/posts/2015/10-12-mysql%E6%8A%80%E6%9C%AF/</guid>
      <description>0x00、数据库基本概念   1.数据模型：描述数据、数据关系、数据语义及一致性约束的概念工具集  1）网络模型 2）层次模型 3）关系模型*  2.关系模型：用表来描述数据与数据间的关系 3.数据完整性和数据保护 4.mysql 1.0诞生于1995年 5.mysql以守护进程运行   0x01、结构体系   1.连接器 mysql&amp;gt; show variables like &amp;ldquo;%connection%&amp;rdquo;; 进行身份验证、线程重用,连接限制,检查内存,数据缓存；管理用户的连接，线程处理等需要缓存的需求。 2.连接池组件 3.缓存 全局和引擎特定的缓存和缓冲区 mysql&amp;gt; show variables like &amp;lsquo;%query_cache%&amp;lsquo;; 4.权限 5.表管理器 6.日志管理 7.sql接口组件 进行DML、DDL,存储过程、视图、触发器等操作和管理；用户通过SQL命令来查询所需结果。 8.插件式存储引擎 mysql&amp;gt; show engines; 9.解析器 查询翻译对象的特权；SQL命令传递到解析器的时候会被解析器验证和解析 10.优化器 访问路径的统计数据 mysql&amp;gt; select @@optimizer_switch; 11.管理服务与工具组件 备份和恢复的安全性，复制，集群，管理，配置，迁移和元数据 12.物理文件 #1.日志文件 1)错误日志：errorlog 2)二进制日志：binlog 3)更新日志：update log 4)查询日志：query log 5)慢查询日志：slow query log 6)innodb在线redo日志：innodb redo log #2.数据文件 1).frm:任何存储引擎都有一个，存储表结构定义信息 2).MYD:MYISAM存储引擎专用，存储数据 3).MYI:MYISAM存储引擎专用，存储索引信息 4).idb和idbdata:innodb存储引擎存储数据，.idb存储独享表空间数据，idbdata存储共享表空间数据 #3.replication相关文件： 1)master.info文件：存在于slave端的数据目录下，存放master端的ip，用户，连接密码和接口等数据 2)relay log和relay log index 3)relay-log.info文件 #4.其他文件 1)system config file:my.cnf 2)pid file:存放mysql进程 3)socket file:unix\linux环境下才有，可以不用tcp协议连接而用unix的socket来连接mysql   0x02、系统架构  1.逻辑模块 #1.SQL Layer:权限判断、sql解析、执行计划优化、query cache的处理 1)初始化模块：在mysql server启动时，对整个系统做各种各样的优化，如：各种buffer、cache结构的初始化和内存空间申请，各种系统变量初始化，各种存储引擎初始化等 2)核心API:提供一些需要非常高效的底层操作功能的优化实现,包括各种底层数据结构的实现，特殊算法的实现，字符串处理，数字处理等，小文件I/O，格式化输出，以及最重要的内存管理部分 3)网络交换模块：抽象出底层网络交互所使用的接口api， 实现底层网络数据的接收与发送，以方便其他各个模块调用，以及对这一部分的维护。 4)Client&amp;amp;Server 交换协议模块：任何C/S结构的软件系统， 都肯定会有自己独有的信息交互协议，MySQL也不例外。MySQL的Client &amp;amp; Server 交互协议模块部分，实现了客户端与MySQL交互过程中的所有协议。 当然这些协议都是建立在现有的OS和网络协议之上的，如TCP/IP以及Unix Socket 5)用户模块：主要包括用户的登录连接权限控制和用户的授权管理 6)访问控制模块：根据用户模块中各用户的授权信息， 以及数据库自身特有的各种约束， 来控制用户对数据的访问。 用户模块和访问控制模块两者结合起来， 组成了MySQL整个数据库系统的权限安全管理的功能 7)连接管理、连接线程和线程管理：负责监听对MySQL Server的各种请求，接收连接请求，转发所有连接请求到线程管理模块。每一个连接上MySQL Server的客户端请求都会被分配（或创建）一个 连接线程为其单独服务。而连接线程的主要工作就是负责 MySQL Server与客户端的通信，接受客户端的命令请求，传递Server端的结果信息等。线程管理模块则负责管理维护这些 连接线程。包括线程的创建，线程的cache等 8)Query解析和转发模块：MySQL中我们习惯将所有Client端发送给Server端的命令都称为query， 在 MySQL Server里面，连接线程接收到客户端的一个 Query后，会直接将该 query传递给专门负责 将各种Query进行分类然后转发给各个对应的处理模块， 这个模块就是query解析和转发模块。 其主要工作就是将query语句进行语义和语法的分析， 然后按照不同的操作类型进行分 类，然后做出针对性的转发。 9)Query Cache模块：主要功能是将客户端提交给MySQL的Select类query请求的返回结果集cache到内存中， 与该query的一个hash值做一个对应。该Query所取数据的基表发生任何数据的变化之后， MySQL会自动使该query的 Cache 失效。在读写比例非常高的应用系统中， Query Cache对性能的提高是非常显著的。当然它对内存的消耗也是非常大的。 10)Query优化器模块：根据客户端请求的query语句，和数据库中的一些统计信息，在一系列算法的基础上进行分析，得出一个最优的策略，告诉后面的程序如何取得这个query语句的结果。 11)表变更管理模块：主要是负责完成一些DML和 DDL的query，如： update， delte， insert，create table， alter table等语句的处理 12)表维护模块：表的状态检查，错误修复，以及优化和分析等工作都是表维护模块需要做的事情。 13)系统状态管理模块：负责在客户端请求系统状态的时候， 将各种状态数据返回给用户， 像DBA常用的各种show status命令， show variables命令等， 所得到的结果都是由这个模块返回的 14)表管理器：表管理器的工作主要就是维护.</description>
    </item>
    
  </channel>
</rss>