<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具 on hackfox</title>
    <link>http://xsoer.github.io/tags/%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 工具 on hackfox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 24 Feb 2018 16:42:41 +0000</lastBuildDate>
    
	<atom:link href="http://xsoer.github.io/tags/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Atom原理</title>
      <link>http://xsoer.github.io/post/180224-atom%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 24 Feb 2018 16:42:41 +0000</pubDate>
      
      <guid>http://xsoer.github.io/post/180224-atom%E5%8E%9F%E7%90%86/</guid>
      <description>atom基于electron来构建，可以跨平台、开源。 什么是electron呢？  a framework for building cross platform apps using web technologies   Electron  简介
  一个基于Node、chromium、V8集成的跨平台的用web技术开发桌面程序的工具。   如何集成的？
  分为一个主进程和渲染进程。 主进程。package.json里的main函数就是主进程， 运行在主进程中的脚本将以创建 web 页面的方式显示一个 GUI。 渲染进程。由于 Electron 使用 Chromium 来显示 web 页面，所以 Chromium 的多进程架构也是可用的。 每个 Electron 中的 web 页面运行在它的叫渲染进程的进程中。在通常的浏览器内，网页通常运行在一个沙盒的环境挡住并且不能够使用原生的资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些低级别的交互。 两者区别。  主进程使用 BrowserWindow 实例创建页面。 每个 BrowserWindow 实例都在自己的渲染进程里运行页面。 当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。 主进程管理所有页面和与之对应的渲染进程。每个渲染进程都是相互独立的，并且只关心他们自己的页面。 由于在页面里管理原生 GUI 资源是非常危险而且容易造成资源泄露，所以在页面调用 GUI 相关的 APIs 是不被允许的。 如果你想在网页里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。 在 Electron，我们提供几种方法用于主进程和渲染进程之间的通讯。 像 ipcRenderer 和 ipcMain 模块用于发送消息， remote 模块用于 RPC 方式通讯。 这些内容都可以在一个 FAQ 中查看 如何在两个页面之间共享数据。    如何涉及API？有哪些方面的API？使用了chromium的哪些技术?</description>
    </item>
    
    <item>
      <title>linux命令</title>
      <link>http://xsoer.github.io/post/170828-linux%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 28 Aug 2016 12:23:00 +0000</pubDate>
      
      <guid>http://xsoer.github.io/post/170828-linux%E5%91%BD%E4%BB%A4/</guid>
      <description>linux命令 1.1.修改权限： a)chmod:+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。 r 表示可读取，w 表示可写入，x 表示可执行。 -f : 若该文件权限无法被更改也不要显示错误讯息 -v : 显示权限变更的详细资料 -R : 对目前目录下的所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更) 例：chmod -R 777 /wwwroot/pc811 2. 总核数 = 物理CPU个数 X 每颗物理CPU的核数
总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数# 查看物理CPU个数 cat /proc/cpuinfo| grep &amp;ldquo;physical id&amp;rdquo;| sort| uniq| wc -l# 查看每个物理CPU中core的个数(即核数) cat /proc/cpuinfo| grep &amp;ldquo;cpu cores&amp;rdquo;| uniq# 查看逻辑CPU的个数 cat /proc/cpuinfo| grep &amp;ldquo;processor&amp;rdquo;| wc -l#查看CPU信息（型号） cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c 3.</description>
    </item>
    
  </channel>
</rss>